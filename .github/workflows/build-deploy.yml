name: Build & Deploy

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  release:
    types:
      - published

jobs:
  # Lint
  lint:
    name: Run Lint
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Install Packages
      - name: Install Packages
        run: bun install --frozen-lockfile

      # Run Lint
      - name: Run Lint
        run: bun run lint

  # Unit Tests
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Install Packages
      - name: Install Packages
        run: bun install --frozen-lockfile

      # Run Unit Tests
      - name: Run Unit Tests
        run: bun run test

      # Upload Coverage
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Install Packages
      - name: Install Packages
        run: bun install --frozen-lockfile

      # Build Artifact - Development
      - name: Build Artifact - Development
        if: ${{ github.event_name != 'release' }}
        run: |
          cp .env.development .env
          bunx vercel pull --yes --token ${VERCEL_TOKEN}
          bunx vercel build --token ${VERCEL_TOKEN}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      # Build Artifact - Production
      - name: Build Artifact - Production
        if: ${{ github.event_name == 'release' }}
        run: |
          cp .env.production .env
          bunx vercel pull --yes --token ${VERCEL_TOKEN}
          bunx vercel build --prod --token ${VERCEL_TOKEN}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      # Upload Artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: .vercel/output
